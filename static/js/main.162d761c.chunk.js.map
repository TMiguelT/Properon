{"version":3,"sources":["colours.js","actions.js","components/AnnotationUpload.js","components/MaterialFormik.js","components/AutoSubmit.js","components/PlotSettings.js","../../useDimensions/es/index.js","components/SvgLayout.js","components/ResizingSvg.js","components/DiagramScale.js","components/GeneBlocks.js","components/GenePlot.js","components/DisplaySettings.js","components/SinglePage.js","reducers/reducer.js","Store.js","serviceWorker.js","index.js","App.js"],"names":["Lava","_ColourRotator","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","ColourRotator","colours","i","createClass","key","value","colour","length","geneColours","createActions","SET_CONTIGS","undefined","SET_GENES","UPDATE_SETTINGS","SET_CONTIG_LOADING","SET_GENE_LOADING","setContigs","setGenes","updateSettings","setContigLoading","setGeneLoading","UPLOAD_ANNOTATIONS","annotations","dispatch","getState","contigs","FileReaderStream","pipe","gff","parseStream","parseFeatures","parseDirectives","parseSequences","on","directive","push","seq_id","payload","preThunkPayload","SET_POSITION","position","data","genes","features","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","feature","name","get","every","k","type","contig","start","end","text","strand","color","getColour","_iterator","Symbol","iterator","next","done","err","return","uploadAnnotations","setPosition","AnnotationUpload","props","loading","_useState","useState","_useState2","slicedToArray","filename","setFilename","useDispatch","_useDropzone","useDropzone","accept","onDrop","files","file","getRootProps","acceptedFiles","getInputProps","react_default","a","createElement","Grid","container","justify","alignItems","className","style","textAlign","Button","variant","size","CircularProgress","marginLeft","CloudUpload_default","MaterialFormikInput","_ref","field","form","_ref$checkbox","checkbox","label","custom","objectWithoutProperties","error","getIn","errors","touched","FormControlLabel","control","Checkbox","assign","checked","TextField","helperText","connect","debounceMs","formik","_React$useState","React","_React$useState2","setLastSaved","debouncedSubmit","useCallback","debounce","submitForm","then","Date","toISOString","useEffect","values","PlotSettings","formik_esm","initialValues","onSubmit","console","log","render","formikProps","_InnerForm","setFieldValue","handleSubmit","handleChange","handleBlur","AutoSubmit","item","md","FormControl","fullWidth","InputLabel","htmlFor","component","Select","map","MenuItem","useDimensions_es","arguments","_ref$liveMeasure","liveMeasure","_ref$boundsType","boundsType","_ref$ref","ref","react","dimensions","setDimensions","node","setNode","localRef","current","measure","window","requestAnimationFrame","rect","SVGGraphicsElement","Error","width","getBBox","height","left","x","top","y","right","bottom","getBoundingClientRect","HTMLElement","offsetWidth","offsetHeight","offsetTop","offsetLeft","scrollWidth","scrollHeight","scrollTop","scrollLeft","getDimensionObject","addEventListener","removeEventListener","SvgLayout","mode","realChildren","children","filter","child","childDims","setChildDims","setIthDims","dims","val","j","cumSums","reduce","acc","curr","Children","childProps","wrapperProps","xOffset","reportWidth","yOffset","reportHeight","newChild","cloneElement","SvgChild","_useDimensions","useDimensions","_useDimensions2","ResizingSvg","forwardRef","rest","svgRef","svgDims","DiagramLabels","valueStart","xOffsetStart","fontSize","majorTicks","widthScale","tick","dominantBaseline","textAnchor","DiagramLine","xOffsetEnd","minorTicks","minorTickHeight","majorTickHeight","minorTickWidth","majorTickWidth","lineWidth","baseline","strokeWidth","stroke","x1","x2","y1","y2","DiagramScale","valueEnd","_getTicks","minorTick","majorTick","endTicks","getTicks","_getTicks2","DiagramScale_DiagramLabels","DiagramScale_DiagramLine","defaultProps","showScale","GeneBlock","_Path","geneLength","coords","textColour","rounded","pointLength","textRotation","textRef","textDims","triangle","path","Path","moveTo","apply","toConsumableArray","lineTo","b","bezierCurveTo","c","concat","d","e","g","f","close","blockTransform","m","textX","t","textY","fill","transform","Genes","geneHeight","xPadding","centerLine","lineHeight","gene","valueOf","GenePlot","padding","scaleProps","geneStrokeWidth","labelRotation","useRef","displayLength","plusGenes","minusGenes","direction","xs","overflowX","components_ResizingSvg","components_DiagramScale","GeneBlocks","onClick","outerHTML","blob","Blob","FileSaver","saveAs","DisplaySettings","scaleFontSize","labelFontSize","scaleHeight","scaleProportion","firstLastTick","scaleWidth","isValid","ExpansionPanel","ExpansionPanelSummary","Typography","ExpansionPanelDetails","parse","Number","inputProps","min","max","SinglePageForm","state","useSelector","Fragment","Container","maxWidth","defaultExpanded","loadingState","Divider","settings","initialState","reducer","handleActions","_handleActions","defineProperty","actions","objectSpread","_ref2","_ref3","_ref4","_ref5","_ref6","ret","_ref7","store","createStore","combineReducers","formReducer","composeWithDevTools","applyMiddleware","FsaThunk","Boolean","location","hostname","match","ReactDOM","es","spacing","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.162d761c.chunk.js","sourcesContent":["export class ColourRotator {\n    constructor(colours) {\n        this.colours = colours;\n        this.i = 0;\n    }\n\n    getColour() {\n        const colour = this.colours[this.i % this.colours.length];\n        this.i++;\n        return colour;\n    }\n}\n\nexport class Lava extends ColourRotator{\n    constructor(){\n        super([\n            '#D00E14',\n            '#06AED5',\n            '#086788',\n            '#F0C808',\n            '#FFF1D0'\n        ])\n    }\n}\n","import {createActions} from 'redux-actions';\nimport FileReaderStream from 'filereader-stream';\nimport gff from '@gmod/gff';\nimport {getFormValues, isValid} from 'redux-form';\nimport {Lava} from './colours';\n\nimport get from 'lodash/get';\n\n\nconst geneColours = new Lava();\n\nexport const {setContigs, setGenes, updateSettings, setContigLoading, setGeneLoading} = createActions({\n    SET_CONTIGS: undefined,\n    SET_GENES: undefined,\n    UPDATE_SETTINGS: undefined,\n    SET_CONTIG_LOADING: undefined,\n    SET_GENE_LOADING: undefined\n});\n\nexport const {uploadAnnotations, setPosition} = createActions({\n    UPLOAD_ANNOTATIONS: [\n        annotations => {\n            // Upload an annotations file.\n            // The reducer will set the actual annotation state. This creator also reads the annotations to find the contigs\n            return (dispatch, getState) => {\n                // First, tell the application we're loading\n                dispatch(setContigLoading(true));\n                \n                // Then parse the file to find the contigs\n                const contigs = [];\n                FileReaderStream(annotations)\n                    .pipe(gff.parseStream({\n                        parseFeatures: false,\n                        parseDirectives: true,\n                        parseSequences: false\n                    }))\n                    .on('data', directive => {\n                        if (directive.directive === 'sequence-region')\n                            contigs.push(directive.seq_id);\n                    })\n                    .on('end', () => {\n                        // Finally, update the contigs, and set the loading state\n                        // This could be one action, but theoretically we might want to do one without the other\n                        dispatch(setContigLoading(false));\n                        dispatch(setContigs(contigs));\n                    });\n            };\n        },\n        payload => ({preThunkPayload: payload})\n    ],\n    SET_POSITION: [\n        position => {\n            // Set the position of interest. This action creator will parse the GFF to find genes, and the reducer will\n            // set the position state the store.\n            return (dispatch, getState) => {\n\n                // Stop if we have no annotations to plot\n                const {annotations} = getState().data;\n                if (annotations === null)\n                    return;\n                \n                // First, tell the application we're loading\n                dispatch(setGeneLoading(true));\n\n                const genes = [];\n                FileReaderStream(annotations)\n                    .pipe(gff.parseStream({\n                        parseFeatures: true,\n                        parseDirectives: false,\n                        parseSequences: false\n                    }))\n                    .on('data', features => {\n                        for (const feature of features) {\n                            // Fetch the name, or default to an empty string\n                            const name =  get(feature, 'attributes.Name[0]', '');\n\n                            // Skip features without the required attributes\n                            if (!['type', 'start', 'end'].every(k => k in feature))\n                                continue;\n\n                            if (\n                                feature.type === 'gene'\n                                && feature.seq_id === position.contig\n                                && feature.start <= position.end\n                                && feature.end <= position.end\n                                && feature.start >= position.start\n                                && feature.end >= position.start\n                            ) {\n                                genes.push({\n                                    start: feature.start,\n                                    end: feature.end,\n                                    text: name,\n                                    strand: feature.strand,\n                                    color: geneColours.getColour()\n                                });\n                            }\n                        }\n                    })\n                    .on('end', () => {\n                        dispatch(setGeneLoading(false));\n                        dispatch(setGenes(genes));\n                    });\n            };\n        },\n        payload => ({preThunkPayload: payload})\n    ]\n});\n\n\n\n","import React, {useState} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport {useDispatch} from 'react-redux';\nimport {uploadAnnotations} from '../actions';\nimport {useDropzone} from 'react-dropzone';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport default function AnnotationUpload(props) {\n    const {loading} = props;\n    const [filename, setFilename] = useState();\n    const dispatch = useDispatch();\n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone({\n        accept: '.gff,.gtf,.gff3',\n        onDrop(files) {\n            const file = files[0];\n            setFilename(file.name);\n            dispatch(uploadAnnotations(file));\n        }\n    });\n\n    return (\n        <Grid container justify='center' alignItems='center'>\n            <form>\n                <section className=\"container\" style={{textAlign: 'center'}}>\n                    <div {...getRootProps({className: 'dropzone'})}>\n                        <input {...getInputProps()}/>\n                        <Button color={'primary'} variant={'contained'} size={'large'}>\n                            Upload GFF\n                            {loading ?\n                                <CircularProgress variant={'indeterminate'} size={20} color={'secondary'} style={{marginLeft: '5px'}}/>\n                                :\n                                <CloudUploadIcon style={{marginLeft: '5px'}}/>\n                            }\n                        </Button>\n                    </div>\n                    <div>{filename}</div>\n                </section>\n            </form>\n        </Grid>\n    );\n}\n\nAnnotationUpload.propTypes = {};","import {getIn} from 'formik';\nimport React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport TextField from '@material-ui/core/TextField';\n\nexport function MaterialFormikInput(\n    {\n        field,\n        form,\n        checkbox = false,\n        label,\n        ...custom\n    }) {\n    const error = getIn(form.errors, field.name);\n    const touched = getIn(form.touched, field.name);\n\n    if (checkbox) {\n        return (<FormControlLabel\n            control={\n                <Checkbox\n                    {...field}\n                    {...custom}\n                    checked={field.value}\n                    color=\"primary\"\n                />\n            }\n            label={label}\n        />);\n    }\n    else {\n        return (<TextField\n            label={label}\n            error={touched && error}\n            helperText={touched && error}\n            {...field}\n            {...custom}\n        />);\n    }\n}\n\n","import React from 'react';\nimport { connect, Formik, Field, Form } from 'formik';\nimport debounce from 'just-debounce-it';\n\nfunction AutoSave ({ debounceMs, formik }){\n    const [lastSaved, setLastSaved] = React.useState(null);\n    const debouncedSubmit = React.useCallback(\n        debounce(\n            () =>\n                formik.submitForm().then(() => setLastSaved(new Date().toISOString())),\n            debounceMs\n        ),\n        [debounceMs, formik.submitForm]\n    );\n\n    React.useEffect(() => {\n        debouncedSubmit();\n    }, [debouncedSubmit, formik.values]);\n    \n    return null;\n}\n\nexport default connect(AutoSave);\n","import React, {useEffect} from 'react';\nimport Input from '@material-ui/core/Input';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport {MenuItem, Select} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport {Formik, withFormik, Field} from 'formik';\nimport TextField from '@material-ui/core/TextField';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {MaterialFormikInput} from './MaterialFormik';\nimport {setPosition} from '../actions';\nimport AutoSubmit from './AutoSubmit';\n\nexport default function PlotSettings(props) {\n    const dispatch = useDispatch();\n    return <Formik\n        initialValues={{\n            contig: '',\n            start: 0,\n            end: 5000\n        }}\n        onSubmit={values => {\n            console.log(values);\n            dispatch(setPosition(values));\n        }}\n        render={formikProps => <_InnerForm {...props} {...formikProps}/>}\n    />;\n}\n\nfunction _InnerForm(props) {\n    const {contigs, handleSubmit, handleChange, handleBlur, values, errors, setFieldValue} = props;\n\n    // Whenever the list of contigs changes, set the current value to the first one\n    useEffect(() => {\n        setFieldValue('contig', contigs[0]);\n    }, [contigs]);\n\n    return (\n        <Grid container justify='center' alignItems='center'>\n            <AutoSubmit debounceMs={300}/>\n            <Grid item md={4}>\n                <FormControl fullWidth>\n                    <InputLabel htmlFor=\"contig\">Operon Contig</InputLabel>\n                    <Field name='contig' component={\n                        ({field}) => {\n                            return <Select {...field}>\n                                {\n                                    contigs.map(contig => {\n\n                                        return (\n                                            <MenuItem value={contig}>\n                                                {contig}\n                                            </MenuItem>\n                                        );\n                                    })\n                                }\n                            </Select>;\n                        }\n                    }/>\n                </FormControl>\n            </Grid>\n            <Grid item md={4}>\n                <Field label=\"Start coordinate\" name='start' fullWidth component={MaterialFormikInput} type={'number'}/>\n            </Grid>\n            <Grid item md={4}>\n                <Field label=\"End coordinate\" name='end' fullWidth component={MaterialFormikInput} type={'number'}/>\n            </Grid>\n        </Grid>\n    );\n}\n\nPlotSettings.propTypes = {\n    selectedContig: PropTypes.string,\n    selectContig: PropTypes.func,\n    contigs: PropTypes.arrayOf(PropTypes.string)\n};\n","import { useState, useCallback, useLayoutEffect } from \"react\";\n\nfunction getDimensionObject(node, boundsType) {\n  var rect = void 0;\n\n  switch (boundsType) {\n    case \"BBOX\":\n      if (!(node instanceof SVGGraphicsElement)) throw new Error();\n      rect = node.getBBox();\n      return {\n        width: rect.width,\n        height: rect.height,\n        left: rect.x,\n        top: rect.y,\n        x: rect.x,\n        y: rect.y,\n        right: rect.right,\n        bottom: rect.bottom\n      };\n\n    case \"CLIENT\":\n      rect = node.getBoundingClientRect();\n      return {\n        width: rect.width,\n        height: rect.height,\n        top: \"x\" in rect ? rect.x : rect.top,\n        left: \"y\" in rect ? rect.y : rect.left,\n        x: \"x\" in rect ? rect.x : rect.left,\n        y: \"y\" in rect ? rect.y : rect.top,\n        right: rect.right,\n        bottom: rect.bottom\n      };\n\n    case \"OFFSET\":\n      if (!(node instanceof HTMLElement)) throw new Error();\n      return {\n        width: node.offsetWidth,\n        height: node.offsetHeight,\n        top: node.offsetTop,\n        left: node.offsetLeft,\n        x: node.offsetLeft,\n        y: node.offsetTop,\n        right: null,\n        bottom: null\n      };\n\n    case \"SCROLL\":\n      return {\n        width: node.scrollWidth,\n        height: node.scrollHeight,\n        top: node.scrollTop,\n        left: node.scrollLeft,\n        x: node.scrollLeft,\n        y: node.scrollTop,\n        right: null,\n        bottom: null\n      };\n  }\n}\n\nfunction useDimensions() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$liveMeasure = _ref.liveMeasure,\n      liveMeasure = _ref$liveMeasure === undefined ? true : _ref$liveMeasure,\n      _ref$boundsType = _ref.boundsType,\n      boundsType = _ref$boundsType === undefined ? \"CLIENT\" : _ref$boundsType,\n      _ref$ref = _ref.ref,\n      ref = _ref$ref === undefined ? function () {} : _ref$ref;\n\n  var _useState = useState({}),\n      dimensions = _useState[0],\n      setDimensions = _useState[1];\n\n  var _useState2 = useState(null),\n      node = _useState2[0],\n      setNode = _useState2[1];\n\n  var localRef = useCallback(function (node) {\n    setNode(node);\n\n    if (typeof ref === \"function\") {\n      ref(node);\n    } else {\n      ref.current = node;\n    }\n  }, []);\n  useLayoutEffect(function () {\n    if (node) {\n      var measure = function measure() {\n        return window.requestAnimationFrame(function () {\n          return setDimensions(getDimensionObject(node, boundsType));\n        });\n      };\n\n      measure();\n\n      if (liveMeasure) {\n        window.addEventListener(\"resize\", measure);\n        window.addEventListener(\"scroll\", measure);\n        return function () {\n          window.removeEventListener(\"resize\", measure);\n          window.removeEventListener(\"scroll\", measure);\n        };\n      }\n    }\n  }, [node]);\n  return [localRef, dimensions, node];\n}\n\nexport default useDimensions;","import React, {useRef, useEffect, useState} from 'react';\nimport propTypes from 'prop-types';\nimport useDimensions from 'react-use-dimensions';\n\n/**\n * Component that automatically lays out child SVG components so that they are offset from each other, and are not \n * overlapping, kind of like HTML does, but for SVG\n */\nexport default function SvgLayout(props) {\n    const {mode, children} = props;\n    \n    // Filter out null children\n    const realChildren = children.filter(child => child);\n\n    // Start with each child having an offset of 0\n    const [childDims, setChildDims] = useState(realChildren.map(() => 0));\n\n    function setIthDims(i) {\n        // Returns a function that takes a dimension and updates the state with it\n        return dims => {\n            // Skip if it isn't changing\n            if (childDims[i] === dims)\n                return;\n            \n            setChildDims(childDims.map((val, j) => {\n                if (j === i)\n                    return dims;\n                else\n                    return val;\n            }));\n        };\n    }\n    \n    // The offsets for each element are the cumulative sums of the sizes of each element\n    const cumSums = childDims.reduce((acc, curr, i) => {\n        if (i === 0)\n            acc.push(0);\n        else\n            acc.push(acc[i-1] + childDims[i-1]);\n        \n        return acc\n    }, []);\n\n    return <g>\n        {React.Children.map(realChildren, (child, i) => {\n            let childProps, wrapperProps;\n            \n            if (mode === 'width'){\n                childProps = {\n                    xOffset: cumSums[i]                   \n                };\n                wrapperProps = {\n                    reportWidth: setIthDims(i)\n                }\n            }\n            else{\n                childProps = {\n                    yOffset: cumSums[i]\n                };\n                wrapperProps = {\n                    reportHeight: setIthDims(i)\n                }\n            }\n            \n            const newChild = React.cloneElement(child, childProps); \n            return <SvgChild {...wrapperProps}>\n                {newChild}\n            </SvgChild>;\n        })}\n    </g>;\n}\n\nfunction SvgChild(props){\n    const {reportHeight, reportWidth, children} = props;\n    \n    \n    const [ref, dims] = useDimensions({\n        boundsType: 'BBOX'\n    });\n\n    useEffect(() => {\n        if (reportHeight && 'height' in dims){\n            reportHeight(dims.height);\n        }\n        \n        if (reportWidth && 'width' in dims){\n            reportWidth(dims.width);\n        }\n    }, [dims, reportWidth, reportHeight]);\n    \n    // children is a single element, so we can do this\n    return React.cloneElement(children, {ref})\n}\n\nSvgLayout.propTypes = {\n    /**\n     * Either \"height\" or \"width\", which determines which dimension we are layout out over\n     */\n    mode: propTypes.string,\n    children: propTypes.arrayOf(propTypes.element)\n};\n","import React, {useRef, useEffect, useState} from 'react';\nimport propTypes from 'prop-types';\nimport useDimensions from 'react-use-dimensions';\n\nconst ResizingSvg = React.forwardRef(function ResizingSvg(props, ref){\n    const {height, width, children, ...rest} = props;\n\n    const [svgRef, svgDims] = useDimensions({\n        boundsType: 'BBOX',\n        ref: ref\n    });\n\n    return <svg\n        ref={svgRef}\n        height={svgDims.height || height}\n        width={svgDims.width || width}\n        {...rest}\n    >\n        {children}\n    </svg>;\n});\n\nResizingSvg.propTypes = {\n    height: propTypes.number,\n    width: propTypes.number,\n    children: propTypes.arrayOf(propTypes.element)\n};\n\nexport default ResizingSvg;\n","import React, {useState, useRef, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport SvgLayout from './SvgLayout';\n\nfunction getTicks(minorTick, majorTick, valueStart, valueEnd, endTicks) {\n    // Start with one major tick for the start and end\n    const minorTicks = [];\n    const majorTicks = endTicks ? [valueStart, valueEnd] : [];\n\n    // Calculate the other ticks\n    for (let i = valueStart; i <= valueEnd; i++) {\n        if (i % majorTick === 0) {\n            majorTicks.push(i);\n            continue;\n        }\n\n        if (i % minorTick === 0) {\n            minorTicks.push(i);\n        }\n    }\n\n    return [minorTicks, majorTicks];\n}\n\n\nconst DiagramLabels = React.forwardRef(function DiagramLabels(props, ref) {\n    const {\n        valueStart,\n        xOffsetStart,\n        yOffset,\n        fontSize,\n        majorTicks,\n        widthScale,\n    } = props;\n    return <g ref={ref} className=\"tickLabels\">\n        {\n            majorTicks.map(tick => {\n                const x = xOffsetStart + (tick - valueStart) * widthScale;\n                return (\n                    <text\n                        dominantBaseline={\"hanging\"}\n                        x={x}\n                        y={yOffset}\n                        textAnchor=\"middle\"\n                        fontSize={fontSize}\n                    >\n                        {tick}\n                    </text>\n                );\n            })\n        }\n    </g>;\n});\n\nconst DiagramLine = React.forwardRef(function DiagramLine(props, ref) {\n    const {\n        color,\n        valueStart,\n        xOffsetStart,\n        xOffsetEnd,\n        yOffset,\n        minorTicks,\n        majorTicks,\n        minorTickHeight,\n        majorTickHeight,\n        minorTickWidth,\n        majorTickWidth,\n        lineWidth,\n        widthScale,\n    } = props;\n    const baseline = yOffset + majorTickHeight;\n    \n    return (\n        <g className=\"scale\" ref={ref}>\n            <line\n                className=\"scale-line\"\n                strokeWidth={lineWidth}\n                stroke=\"black\"\n                x1={xOffsetStart}\n                x2={xOffsetEnd}\n                y1={baseline}\n                y2={baseline}\n            />\n            <g className=\"minorTicks\">\n                {\n                    minorTicks.map(tick => {\n                        const x = xOffsetStart + (tick - valueStart) * widthScale;\n                        return (\n                            <line\n                                className=\"scale-minor-tick\"\n                                x1={x}\n                                x2={x}\n                                y1={baseline - minorTickHeight}\n                                y2={baseline + minorTickHeight}\n                                stroke={color}\n                                strokeWidth={minorTickWidth}\n                            />\n                        );\n                    })\n                }\n            </g>\n            <g className=\"majorTicks\">\n                {\n                    majorTicks.map(tick => {\n                        const x = xOffsetStart + (tick - valueStart) * widthScale;\n                        return (\n                            <line\n                                className=\"scale-minor-tick\"\n                                x1={x}\n                                x2={x}\n                                y1={baseline - majorTickHeight}\n                                y2={baseline + majorTickHeight}\n                                stroke={color}\n                                strokeWidth={majorTickWidth}\n                            />\n                        );\n                    })\n                }\n            </g>\n        </g>\n    );\n});\n\n/**\n * The scale a diagram, including ticks\n */\nconst DiagramScale = React.forwardRef(function DiagramScale(props, ref) {\n    const {\n        valueStart,\n        valueEnd,\n        xOffsetStart,\n        xOffsetEnd,\n        minorTick,\n        majorTick,\n        endTicks,\n    } = props;\n    // The range of genomic coordinates\n    const valueRange = valueEnd - valueStart;\n    // How much to scale the width, in terms of SVG units per genomic unit\n    const widthScale = (xOffsetEnd - xOffsetStart) / valueRange;\n\n    // The genomic positions of each minor and major tick\n    const [minorTicks, majorTicks] = getTicks(minorTick, majorTick, valueStart, valueEnd, endTicks);\n\n    return (\n        <g ref={ref}>\n            <SvgLayout mode=\"height\">\n                <DiagramLabels\n                    majorTicks={majorTicks}\n                    widthScale={widthScale}\n                    {...props}\n                />\n                <DiagramLine\n                    minorTicks={minorTicks}\n                    widthScale={widthScale}\n                    majorTicks={majorTicks}\n                    {...props}\n                />\n            </SvgLayout>\n        </g>\n    );\n});\n\nDiagramScale.propTypes = {\n    /**\n     * The color of the whole scale\n     */\n    color: PropTypes.string,\n\n    /**\n     * If the number is a multiple of this number, it's a minor tick (unless it's a major ticK)\n     */\n    minorTick: PropTypes.number,\n\n    /**\n     * If the number is a multiple of this number, it's a major tick\n     */\n    majorTick: PropTypes.number,\n\n    /**\n     * The distance from the top of the component to the horizontal line\n     */\n    scaleOffset: PropTypes.number,\n\n    /**\n     * The first point on the scale\n     */\n    valueStart: PropTypes.number,\n\n    /**\n     * Where, in the SVG coordinates, do we start the component on the x-axis\n     */\n    xOffsetStart: PropTypes.number,\n\n    /**\n     * Where, in the SVG coordinates, do we end the component on the x-axis\n     */\n    xOffsetEnd: PropTypes.number,\n\n    /**\n     * Where, in the SVG coordinates, do we start the component on the y-axis\n     */\n    yOffset: PropTypes.number,\n\n    /**\n     * The last point on the scale\n     */\n    valueEnd: PropTypes.number,\n\n    /**\n     * The height of a minor tick\n     */\n    minorTickHeight: PropTypes.number,\n\n    /**\n     * The width of a minor tick\n     */\n    minorTickWidth: PropTypes.number,\n\n    /**\n     * The height of a major tick\n     */\n    majorTickHeight: PropTypes.number,\n\n    /**\n     * The width of a major tick\n     */\n    majorTickWidth: PropTypes.number,\n\n    /**\n     * Size of the tick font\n     */\n    fontSize: PropTypes.number,\n\n    /**\n     * Width of the horizontal scale line\n     */\n    lineWidth: PropTypes.number,\n\n    /**\n     * Whether or not to add a major tick on the first and last point of the scale\n     */\n    endTicks: PropTypes.bool,\n\n    /**\n     * Function called whenever the height of this component can be determined\n     */\n    reportHeight: PropTypes.func,\n\n    /**\n     * Whether or not to show the scale\n     */\n    showScale: PropTypes.bool\n};\n\nDiagramScale.defaultProps = {\n    color: 'black',\n    minorTick: 100,\n    majorTick: 1000,\n    valueStart: 0,\n    valueEnd: 100,\n    minorTickHeight: 5,\n    minorTickWidth: 1,\n    majorTickHeight: 10,\n    majorTickWidth: 2,\n    fontSize: 15,\n    lineWidth: 2,\n    endTicks: true,\n    showScale: true\n};\n\nexport default DiagramScale;\n","import React, {useRef, useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport Path from 'svg-path-generator';\nimport useDimensions from 'react-use-dimensions';\n\nconst Genes = React.forwardRef(function Genes(props, ref){\n    const {\n        yOffset,\n        genes,\n        start,\n        xOffsetStart,\n        xOffsetEnd,\n        pointLength,\n        geneHeight,\n        xPadding,\n        widthScale,\n        centerLine,\n        ...rest\n    } = props;\n    const lineHeight = yOffset + (geneHeight / 2);\n    \n    // Don't even render the line if we have no genes\n    if (genes.length === 0)\n        return null;\n    \n    return <g ref={ref}>\n        {centerLine &&\n        <line x1={xOffsetStart} x2={xOffsetEnd} y1={lineHeight} y2={lineHeight} strokeWidth={\"1px\"} stroke={'black'}/>}\n        {genes.map(gene => {\n            const geneLength = gene.end - gene.start;\n\n            /*\n            The relevant points for a gene are these:\n            a------b-c\n            |----m---d\n            g------f-e\n            \n            For a square gene, we draw lines from a -> b -> d -> f -> g, which forms a rectangle with a point\n            If this gene is rounded, we use c and e as bezier control points\n            For a gene that's too short to have the rectangle section, we form a triangle with a -> d -> g\n            m is the very center of the gene polygon, and t is the center at the bottom, where text should be located\n            */\n\n            const coords = {\n                a: [gene.start - start, yOffset],\n                b: [gene.end - start - pointLength, yOffset],\n                c: [gene.end - start, yOffset],\n                d: [gene.end - start, yOffset + geneHeight / 2],\n                e: [gene.end - start, yOffset + geneHeight],\n                f: [gene.end - start - pointLength, yOffset + geneHeight],\n                g: [gene.start - start, yOffset + geneHeight],\n                t: [gene.start - start + geneLength / 2, yOffset + geneHeight],\n                m: [gene.start - start + geneLength / 2, yOffset + geneHeight/2]\n            };\n\n            // Scale all widths\n            for (const key in coords) {\n                coords[key][0] = xPadding + (widthScale * coords[key][0]);\n                coords[key][1] = coords[key][1].valueOf();\n            }\n\n            return <GeneBlock\n                geneLength={geneLength}\n                coords={coords}\n                pointLength={pointLength}\n                colour={gene.color}\n                text={gene.text}\n                strand={gene.strand}\n                {...rest}\n            />;\n        })}\n    </g>;\n});\n\nfunction GeneBlock(props) {\n    const {\n        geneLength,\n        coords,\n        textColour,\n        rounded,\n        pointLength,\n        fontSize,\n        colour,\n        text,\n        strokeWidth,\n        textRotation,\n        strand\n    } = props;\n    const [textRef, textDims] = useDimensions({\n        boundsType: 'BBOX'\n    });\n\n    const triangle = geneLength <= pointLength;\n\n    // Generate the path with the power of if-statements\n    const path = Path()\n        .moveTo(...coords.a);\n    if (!triangle)\n        path.lineTo(...coords.b);\n    if (rounded)\n        path.bezierCurveTo(...coords.c, ...coords.d);\n    else\n        path.lineTo(...coords.d);\n\n    if (!triangle) {\n        if (rounded)\n            path.bezierCurveTo(...coords.e, ...coords.f);\n        else\n            path.lineTo(...coords.f);\n        path.lineTo(...coords.g);\n    }\n    else {\n        if (rounded)\n            path.bezierCurveTo(...coords.e, ...coords.g);\n        else\n            path.lineTo(...coords.g);\n    }\n    path.close();\n\n    const blockTransform = strand === '-' ? `rotate(180, ${coords.m[0]}, ${coords.m[1]})` : '';\n\n    const textX = coords.t[0];\n    const textY = coords.t[1] + (textDims.height / 2);\n    return (\n        <g>\n            <path d={path.end()} fill={colour} strokeWidth={strokeWidth} stroke={'black'} transform={blockTransform}/>\n            <text\n                ref={textRef}\n                x={textX}\n                y={textY}\n                textAnchor=\"end\"\n                fill={textColour}\n                fontSize={fontSize}\n                transform={`rotate(${360 - textRotation}, ${textX}, ${textY})`}\n            >{text}</text>\n        </g>\n    );\n}\n\nGenes.propTypes = {\n    yOffset: PropTypes.number,\n    genes: PropTypes.array,\n    start: PropTypes.number,\n    pointLength: PropTypes.number,\n    geneHeight: PropTypes.number,\n    xPadding: PropTypes.number,\n    widthScale: PropTypes.number,\n    rounded: PropTypes.bool,\n    textColour: PropTypes.string,\n    fontSize: PropTypes.number,\n    centerLine: PropTypes.bool,\n    strokeWidth: PropTypes.number,\n    textRotation: PropTypes.number\n};\n\nexport default Genes;\n","import React, {useRef, useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport FileSaver from 'file-saver';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport SvgLayout from './SvgLayout';\nimport ResizingSvg from './ResizingSvg';\nimport DiagramScale from './DiagramScale';\nimport GeneBlocks from './GeneBlocks';\n\nexport default function GenePlot(props) {\n    const {\n        start,\n        end,\n        width,\n        padding,\n        pointLength,\n        geneHeight,\n        genes,\n        scaleProps,\n        rounded,\n        fontSize,\n        centerLine,\n        showScale,\n        geneStrokeWidth,\n        labelRotation,\n        reportHeight\n    } = props;\n\n    // Keep track of the SVG element, so we can export it\n    const svgRef = useRef();\n\n    // How long is the area we can actually draw in, in SVG units\n    const displayLength = width - (2 * padding);\n\n    // The amount of genomic units we need to fit into the SVG\n    const valueLength = end - start;\n\n    // Width, measured in \"svg units per genomic unit\"\n    const widthScale = displayLength / valueLength;\n\n    const TEXT_COLOR = 'black';\n\n    // const viewBox = `0 0 ${width} ${height}`;\n    if (genes.length === 0)\n        return null;\n    \n    const plusGenes = genes.filter(gene => gene.strand === '+');\n    const minusGenes = genes.filter(gene => gene.strand === '-');\n    \n    return (\n        <Grid direction={'row'} container justify={'center'}>\n            <Grid direction={'row'} xs={12} justify={'center'} container>\n                <div style={{overflowX: 'auto'}}>\n                    <ResizingSvg ref={svgRef} style={{\n                        width: width\n                    }}>\n                        <SvgLayout mode=\"height\">\n                            {showScale && <DiagramScale\n                                xOffsetStart={padding}\n                                xOffsetEnd={padding + displayLength}\n                                valueStart={start}\n                                valueEnd={end}\n                                {...scaleProps}\n                            />}\n                            <GeneBlocks\n                                xOffsetStart={padding}\n                                xOffsetEnd={padding + displayLength}\n                                pointLength={pointLength}\n                                fontSize={fontSize}\n                                geneHeight={geneHeight}\n                                genes={plusGenes}\n                                rounded={rounded}\n                                start={start}\n                                end={end}\n                                textColour={TEXT_COLOR}\n                                widthScale={widthScale}\n                                xPadding={padding}\n                                centerLine={centerLine}\n                                strokeWidth={geneStrokeWidth}\n                                textRotation={labelRotation}\n                            />\n                            <GeneBlocks\n                                xOffsetStart={padding}\n                                xOffsetEnd={padding + displayLength}\n                                pointLength={pointLength}\n                                fontSize={fontSize}\n                                geneHeight={geneHeight}\n                                genes={minusGenes}\n                                rounded={rounded}\n                                start={start}\n                                end={end}\n                                textColour={TEXT_COLOR}\n                                widthScale={widthScale}\n                                xPadding={padding}\n                                centerLine={centerLine}\n                                strokeWidth={geneStrokeWidth}\n                                textRotation={labelRotation}\n                            />\n                        </SvgLayout>\n                    </ResizingSvg>\n                </div>\n            </Grid>\n            <Grid direction={'row'} xs={12} justify={'center'} item>\n                <Button size={'large'} color={'primary'} variant={'contained'} onClick={e => {\n                    const data = svgRef.current.outerHTML;\n                    const blob = new Blob([data], {type: 'image/svg+xml;charset=utf-8'});\n                    FileSaver.saveAs(blob, 'gene.svg');\n                }}>\n                    Download\n                </Button>\n            </Grid>\n        </Grid>\n    );\n}\n\nGenePlot.propTypes = {\n    /**\n     * Where to start the plot, in genomic coordinates\n     */\n    start: PropTypes.number,\n\n    /**\n     * Where to end the plot, in genomic coordinates\n     */\n    end: PropTypes.number,\n\n    /**\n     * A dictionary of props to pass into the <DiagramScale/>\n     */\n    scaleProps: PropTypes.object,\n\n    /**\n     * Font size for the gene labels\n     */\n    fontSize: PropTypes.number,\n\n    /**\n     * Array of genes to plot\n     * Each gene has {start, end, color, text}\n     */\n    genes: PropTypes.array,\n\n    /**\n     * Width of the entire plot, in HTML units\n     */\n    width: PropTypes.number,\n\n    /**\n     * The amount of space to leave either side of the scale, but still inside the SVG, as a proportion of the width.\n     * This should be a number between 0 and 1\n     */\n    padding: PropTypes.number,\n\n    /**\n     * How early to start curving the gene polygons in to a point, as a proportion of width. Must be between 0 and 1\n     */\n    pointLength: PropTypes.number,\n\n    /**\n     * Whether or not to round the ends of the gene polygons\n     */\n    rounded: PropTypes.bool,\n\n    /**\n     * Height of the gene blocks, in pixels\n     */\n    geneHeight: PropTypes.number,\n\n    /**\n     * Whether to have a central line going through the middle of each gene\n     */\n    centerLine: PropTypes.bool,\n\n    /**\n     * Whether or not to show the scale\n     */\n    showScale: PropTypes.bool,\n\n    /**\n     * The width of the border around the gene glyphs\n     */\n    geneStrokeWidth: PropTypes.number,\n\n    /**\n     * The angle of rotation of the gene labels. The text will be rotated by this many degrees *backwards* from \n     * horizontal, not forwards\n     */\n    labelRotation: PropTypes.number\n};\n\nGenePlot.defaultProps = {\n    geneHeight: 100,\n    scaleProps: {},\n    fontSize: 20,\n    width: 800,\n    padding: 50,\n    pointLength: 500,\n    rounded: false,\n    centerLine: true,\n    showScale: true,\n    geneStrokeWidth: 2,\n    labelRotation: 45\n};","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport {Formik, getIn, Field} from 'formik';\nimport Slider from '@material-ui/core/Slider';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\n\nimport GenePlot from './GenePlot';\nimport DiagramScale from './DiagramScale';\nimport {MaterialFormikInput} from './MaterialFormik';\nimport {updateSettings} from '../actions';\nimport {useDispatch} from 'react-redux';\nimport AutoSubmit from './AutoSubmit';\n\nexport default function DisplaySettings(props) {\n    const dispatch = useDispatch();\n    return <Formik\n        initialValues={{\n            scaleFontSize: DiagramScale.defaultProps.fontSize,\n            labelFontSize: GenePlot.defaultProps.fontSize,\n            scaleHeight: GenePlot.defaultProps.scaleProportion,\n            firstLastTick: DiagramScale.defaultProps.endTicks,\n            majorTicks: DiagramScale.defaultProps.majorTick,\n            minorTicks: DiagramScale.defaultProps.minorTick,\n            minorTickHeight: DiagramScale.defaultProps.minorTickHeight,\n            majorTickHeight: DiagramScale.defaultProps.majorTickHeight,\n            rounded: GenePlot.defaultProps.rounded,\n            showScale: GenePlot.defaultProps.showScale,\n            centerLine: GenePlot.defaultProps.centerLine,\n            width: GenePlot.defaultProps.width,\n            pointLength: GenePlot.defaultProps.pointLength,\n            scaleWidth: DiagramScale.defaultProps.lineWidth,\n            minorTickWidth: DiagramScale.defaultProps.minorTickWidth,\n            majorTickWidth: DiagramScale.defaultProps.majorTickWidth,\n            geneStrokeWidth: GenePlot.defaultProps.geneStrokeWidth,\n            geneHeight: GenePlot.defaultProps.geneHeight,\n            labelRotation: GenePlot.defaultProps.labelRotation\n        }}\n        onSubmit={data => {\n            dispatch(updateSettings(data));\n        }}\n\n    >\n        {({handleSubmit, handleChange, handleBlur, values, errors, isValid}) => {\n            return <ExpansionPanel>\n                <ExpansionPanelSummary>\n                    <Typography variant={'h5'}>\n                        Advanced Settings\n                    </Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <AutoSubmit debounceMs={300}/>\n                    <Grid container direction={'row'} justify={'space-evenly'}>\n                        <Grid md={4} item>\n                            <Typography variant={'h6'}>Scale Settings</Typography>\n                            <Grid container justify='center' alignItems='stretch' direction={'column'}>\n                                <Grid item>\n                                    <Field fullWidth label=\"Show scale\" name='showScale' component={MaterialFormikInput}\n                                           checkbox={true}/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Scale font size\" name='scaleFontSize' component={MaterialFormikInput}\n                                           type=\"number\"/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Minor tick interval\" name='minorTicks' component={MaterialFormikInput}\n                                           type={'number'}/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Minor tick height\" name='minorTickHeight'\n                                           component={MaterialFormikInput}\n                                           type=\"number\"/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Minor tick width\" name='minorTickWidth'\n                                           component={MaterialFormikInput}\n                                           type=\"number\"/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Major tick interval\" name='majorTicks' component={MaterialFormikInput}\n                                           type=\"number\"\n                                           parse={Number}/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Major tick width\" name='majorTickWidth'\n                                           component={MaterialFormikInput}\n                                           type=\"number\"/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Major tick height\" name='majorTickHeight'\n                                           component={MaterialFormikInput}\n                                           type=\"number\"/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Scale width\" name='scaleWidth' component={MaterialFormikInput}\n                                           type=\"number\"/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Start end tick\" name='firstLastTick' component={MaterialFormikInput}\n                                           checkbox={true}/>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid md={4} item>\n                            <Typography variant={'h6'}>Gene Settings</Typography>\n                            <Grid container justify='center' alignItems='stretch' direction={'column'}>\n                                <Grid item>\n                                    <Field label=\"Gene symbol height\" name='geneHeight'\n                                           component={MaterialFormikInput}\n                                           type=\"number\"/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Gene label font size\" name='labelFontSize'\n                                           component={MaterialFormikInput}\n                                           type=\"number\"/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Gene border width\" name='geneStrokeWidth'\n                                           component={MaterialFormikInput}\n                                           type=\"number\"/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Round ends\" name='rounded' component={MaterialFormikInput}\n                                           checkbox={true}/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Gene taper length\" name='pointLength' component={MaterialFormikInput}\n                                           type=\"number\"/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Label rotation\" name='labelRotation' component={MaterialFormikInput}\n                                           type=\"number\" inputProps={{min: 0, max: 90}}/>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid md={4} item>\n                            <Typography variant={'h6'}>Miscellaneous Settings</Typography>\n                            <Grid container justify='center' alignItems='stretch' direction={'column'}>\n                                <Grid item>\n                                    <Field label=\"Show center line\" name='centerLine' component={MaterialFormikInput}\n                                           checkbox={true}/>\n                                </Grid>\n                                <Grid item>\n                                    <Field label=\"Plot width\" name='width' component={MaterialFormikInput}\n                                           type=\"number\"/>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>;\n        }}\n    </Formik>\n};\n","import React, {useContext, useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {Field, reduxForm, isValid, getFormValues} from 'redux-form';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\n\nimport AnnotationUpload from './AnnotationUpload';\nimport PlotSettings from './PlotSettings';\nimport GenePlot from './GenePlot';\nimport DisplaySettings from './DisplaySettings';\nimport {Container} from '@material-ui/core';\n\n/**\n * Coordinates the progress through the plot wizard\n */\nexport default function SinglePageForm(props) {\n    const state = useSelector(state => state.data);\n    return (\n        <>\n            <Typography variant={'h3'}>\n                Properon\n            </Typography>\n            <Typography variant={'subtitle1'}>\n                Operon Diagram Generator\n            </Typography>\n            <Container maxWidth={'lg'}>\n                <ExpansionPanel defaultExpanded={true}>\n                    <ExpansionPanelSummary>\n                        <Typography variant={'h5'}>\n                            Annotations\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <Grid container>\n                            <AnnotationUpload loading={state.loadingState.contigs}/>\n                            <Divider variant=\"middle\"/>\n                            <PlotSettings contigs={state.contigs}/>\n                        </Grid>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n                <ExpansionPanel defaultExpanded={true}>\n                    <ExpansionPanelSummary>\n                        <Typography variant={'h5'}>\n                            Plot\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <Grid justify={'center'} container>\n                            {state.loadingState.genes && <CircularProgress variant={'indeterminate'}/>}\n                            <GenePlot\n                                geneStrokeWidth={state.settings.geneStrokeWidth}\n                                start={state.position.start}\n                                end={state.position.end}\n                                genes={state.genes}\n                                centerLine={state.settings.centerLine}\n                                showScale={state.settings.showScale}\n                                width={state.settings.width}\n                                rounded={state.settings.rounded}\n                                geneHeight={state.settings.geneHeight}\n                                fontSize={state.settings.labelFontSize}\n                                pointLength={state.settings.pointLength}\n                                labelRotation={state.settings.labelRotation}\n                                scaleProps={{\n                                    minorTick: state.settings.minorTicks,\n                                    majorTick: state.settings.majorTicks,\n                                    color: 'black',\n                                    minorTickHeight: state.settings.minorTickHeight,\n                                    minorTickWidth: state.settings.minorTickWidth,\n                                    majorTickHeight: state.settings.majorTickHeight,\n                                    majorTickWidth: state.settings.majorTickWidth,\n                                    fontSize: state.settings.scaleFontSize,\n                                    lineWidth: state.settings.scaleWidth,\n                                    endTicks: state.settings.firstLastTick,\n                                    showScale: state.settings.showScale\n                                }}\n                            />\n                        </Grid>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n                <DisplaySettings/>\n            </Container>\n        </>\n    );\n}\n","import {handleActions} from 'redux-actions';\nimport * as actions from '../actions';\nimport GenePlot from '../components/GenePlot';\nimport DiagramScale from '../components/DiagramScale';\n\nexport const initialState = {\n    loadingState: {\n        contigs: false,\n        genes: false\n    },\n    annotations: null,\n    genes: [],\n    contigs: [],\n    position: {\n        contig: null,\n        start: 0,\n        end: 5000\n    },\n    settings: {\n        scaleFontSize: DiagramScale.defaultProps.fontSize,\n        labelFontSize: GenePlot.defaultProps.fontSize,\n        scaleHeight: GenePlot.defaultProps.scaleProportion,\n        firstLastTick: DiagramScale.defaultProps.endTicks,\n        majorTicks: DiagramScale.defaultProps.majorTick,\n        minorTicks: DiagramScale.defaultProps.minorTick,\n        minorTickHeight: DiagramScale.defaultProps.minorTickHeight,\n        majorTickHeight: DiagramScale.defaultProps.majorTickHeight,\n        rounded: GenePlot.defaultProps.rounded,\n        showScale: GenePlot.defaultProps.showScale,\n        centerLine: GenePlot.defaultProps.centerLine,\n        width: GenePlot.defaultProps.width,\n        height: GenePlot.defaultProps.height,\n        pointLength: GenePlot.defaultProps.pointLength\n    }\n};\n\nexport const reducer = handleActions({\n    [actions.setContigs]: (state, {payload: contigs}) => {\n        return {\n            ...state,\n            contigs\n        };\n    },\n    [actions.setGenes]: (state, {payload: genes}) => {\n        return {\n            ...state,\n            genes\n        };\n    },\n    [actions.setPosition]: (state, {payload: position}) => {\n        return {\n            ...state,\n            position\n        };\n    },\n    [actions.uploadAnnotations]: (state, {payload: annotations}) => {\n        return {\n            ...state,\n            annotations\n        };\n    },\n    [actions.updateSettings]: (state, {payload: settings}) => {\n        return {\n            ...state,\n            settings\n        };\n    },\n    [actions.setContigLoading]: (state, {payload: loading}) => {\n        const ret = {\n            ...state,\n        };\n        ret.loadingState.contigs = loading;\n        return ret;\n    },\n    [actions.setGeneLoading]: (state, {payload: loading}) => {\n        const ret = {\n            ...state,\n        };\n        ret.loadingState.genes = loading;\n        return ret;\n    }\n}, initialState);\n\nexport default reducer;\n","import reducer from './reducers/reducer';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport thunk from 'redux-thunk';\nimport FsaThunk from 'fsa-redux-thunk';\nimport { reducer as formReducer } from 'redux-form'\n\nconst store = createStore(\n    combineReducers({\n        // ...your other reducers here\n        // you have to pass formReducer under 'form' key,\n        // for custom keys look up the docs for 'getFormState'\n        data: reducer,\n        form: formReducer\n    }),\n    composeWithDevTools(\n        applyMiddleware(\n            FsaThunk\n        )\n    )\n);\nexport default store;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport SinglePageForm from './components/SinglePage';\nimport {Provider} from 'react-redux';\nimport store from './Store';\n\nexport default function App() {\n    return (\n        <Provider store={store}>\n            <Grid\n                justify={'space-around'}\n                alignItems={'center'}\n                direction=\"column\"\n                container\n                spacing={32}\n            >\n                <SinglePageForm/>\n            </Grid>\n        </Provider>\n    );\n}\n"],"sourceRoot":""}